grammar ICEScript;
//Thanks to DisabledMallis for this grammar :D



script
	: header functionDef*||classDef* statement*
	| EOF
	;

header
	: include*
	;

meta
	: scriptName
	;

scriptName
	: 'name:' identifier END_STMT
	;

include
	: 'import' identifier END_STMT
	;

functionDef
	: 'function' identifier OPEN_BRACKET func_params CLOSE_BRACKET ':' type statement
	| identifier OPEN_BRACKET func_params CLOSE_BRACKET ':' type statement
	;
func_params
	: func_identifier || func_identifier(',' func_identifier)*
	;
func_identifier
	:(identifier||expression||any)':'type
	;
classDef
	:'class' identifier ('extends' identifier)* OPEN_CURLEY classBody CLOSE_CURLEY
	;
classBody
	:functionDef*
	;
classInit
	:'new' methodcall  
	;	
methodcall
	: identifier OPEN_BRACKET methodparams CLOSE_BRACKET
	;
methodparams
	: expression* (',' expression)*
	;
statement
	: OPEN_CURLEY statement* CLOSE_CURLEY
	| assign_stmt
	| asm_stmt
	| add_assign_stmt
	| sub_assign_stmt
	| mul_assign_stmt
	| div_assign_stmt
	| inc_stmt
	| dec_stmt
	| if_stmt
	| if_else_stmt
	| while_stmt
	| for_stmt
	| var_stmt
	| return_stmt
	| expression END_STMT
	| END_STMT
	;

assign_stmt
	: identifier ASSIGN expression END_STMT
	;
asm_stmt
    : '__LLVM' '{' any '}'
    ;

any : ( . )+?;
add_assign_stmt
	: identifier ADDASSIGN value END_STMT
	;
sub_assign_stmt
	: identifier SUBASSIGN value END_STMT
	;
mul_assign_stmt
	: identifier MULASSIGN value END_STMT
	;
div_assign_stmt
	: identifier DIVASSIGN value END_STMT
	;
inc_stmt
	: identifier INCREMENT END_STMT
	;
dec_stmt
	: identifier DECREMENT END_STMT
	;
if_stmt
	: IF OPEN_BRACKET boolexpr CLOSE_BRACKET statement
	;
if_else_stmt
	: IF OPEN_BRACKET boolexpr CLOSE_BRACKET statement ELSE statement
	;	
while_stmt
	: WHILE OPEN_BRACKET boolexpr CLOSE_BRACKET statement
	;
for_stmt
	:FOR OPEN_BRACKET var_stmt boolexpr END_STMT (inc_stmt||dec_stmt) CLOSE_BRACKET statement
	|FOR OPEN_BRACKET var_stmt 'in' value CLOSE_BRACKET statement
	;
var_stmt
	: VAR identifier ASSIGN expression END_STMT
	| VAR identifier ':' type ASSIGN expression END_STMT
	;
return_stmt
	: RETURN expression END_STMT
	;

//Expression
expression
	: OPEN_BRACKET expression CLOSE_BRACKET
	| classInit
	| methodcall
	| value
	| identifier
	| boolexpr
	| string
	| object
	| list
	| string_concat
	| expression ADD expression
	| expression SUB expression
	| expression MUL expression
	| expression DIV expression
	;
math
	: expression ADD expression
	| expression SUB expression
	| expression MUL expression
	| expression DIV expression
	;
//Boolean expression
boolexpr
	: value
	| TRUE
	| FALSE
	| value GREATER_THAN boolexpr
	| value LESS_THAN boolexpr
	| value EQUAL_TO boolexpr
	| value NOT_EQUAL_TO boolexpr
	| value GREATER_THAN_OR_EQUAL boolexpr
	| value LESS_THAN_OR_EQUAL boolexpr
	| value OR boolexpr
	| value AND boolexpr
	| NOT boolexpr
	;





//Syntax operators
OPEN_BRACKET : '(';
CLOSE_BRACKET : ')';
OPEN_CURLEY : '{';
CLOSE_CURLEY : '}';
END_STMT : ';';


//Mathematic operators
ADD : '+';
SUB : '-';
MUL : '*';
DIV : '/';

//Boolean operators
GREATER_THAN : '>';
LESS_THAN : '<';
EQUAL_TO : '==';
NOT_EQUAL_TO : '!=';
GREATER_THAN_OR_EQUAL : '>=';
LESS_THAN_OR_EQUAL : '<=';
OR : '||';
AND  : '&&';
NOT : '!';

//Assignment operators
ASSIGN : '=';
ADDASSIGN : '+=';
SUBASSIGN : '-=';
MULASSIGN : '*=';
DIVASSIGN : '/=';
IF : 'if';
ELSE : 'else';
//Incremental operators
INCREMENT : '++';
DECREMENT : '--';

//Basic keywords & concepts
DEF : 'function';
VAR : 'var';
WHILE : 'while';
FOR : 'for';
RETURN : 'return';
TRUE : 'true';
FALSE : 'false';


value
	: identifier
	| number
	;

identifier
	:IDENTIFIER
	;

IDENTIFIER : [a-zA-Z][a-zA-Z0-9_.]*;
number
   : NUMBER
   | PI
   ;
list
	:'['expression* (',' expression)*']'
	;
object
	:'{' (string ':' data)* (',' (string ':' data)*) '}'
	;
string
	:STRING
	;
string_concat
	:(string||data)'+'(string||data)('+'(string||data))*
	;
data
	:string
	|list
	|number
	|boolexpr
	|object
	|value
	|classInit
	|methodcall
	;

//Mathematic constants
PI : '$pi';


fragment INT
   : '0' | [1-9] [0-9]*
   ;

//Data types
STRING : '"' ~ ["\r\n]* '"';
LIST : '[' ( . )+? ']';
NUMBER: '-'? INT ('.' [0-9] +)?;
type
	:
	|'object'
	|'void'
	|'list'
	|'str'
	|'number'
	|'bool'
	| type '[]'
	;
//Stuff we wanna ignore
LINECOMMENT : '//' ~[\r\n]* -> skip;
BLOCKCOMMENT : '/*' .*? '*/' -> skip;
WHITESPACE : [ \t\r\n] -> skip;
