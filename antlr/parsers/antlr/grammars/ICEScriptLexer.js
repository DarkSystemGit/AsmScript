// Generated from ./antlr/grammars/ICEScript by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,47,320,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,1,0,1,
0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,
3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,
10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,
1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,
21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,
1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,
29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,
35,1,35,1,35,1,35,1,35,1,36,1,36,5,36,230,8,36,10,36,12,36,233,9,36,1,37,
3,37,236,8,37,1,37,1,37,1,37,4,37,241,8,37,11,37,12,37,242,3,37,245,8,37,
1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,5,41,257,8,41,10,41,12,
41,260,9,41,3,41,262,8,41,1,42,1,42,5,42,266,8,42,10,42,12,42,269,9,42,1,
42,1,42,1,43,1,43,4,43,275,8,43,11,43,12,43,276,1,43,1,43,1,44,1,44,1,44,
1,44,5,44,285,8,44,10,44,12,44,288,9,44,1,44,1,44,1,45,1,45,1,45,1,45,5,
45,296,8,45,10,45,12,45,299,9,45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,307,
8,46,10,46,12,46,310,9,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,2,
276,308,0,48,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
37,75,38,77,39,79,40,81,41,83,0,85,42,87,43,89,44,91,45,93,46,95,47,1,0,
7,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,1,0,49,57,3,0,
10,10,13,13,34,34,2,0,10,10,13,13,3,0,9,10,13,13,32,32,329,0,1,1,0,0,0,0,
3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,
0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,
95,1,0,0,0,1,97,1,0,0,0,3,103,1,0,0,0,5,111,1,0,0,0,7,113,1,0,0,0,9,123,
1,0,0,0,11,125,1,0,0,0,13,127,1,0,0,0,15,129,1,0,0,0,17,131,1,0,0,0,19,133,
1,0,0,0,21,135,1,0,0,0,23,137,1,0,0,0,25,139,1,0,0,0,27,141,1,0,0,0,29,143,
1,0,0,0,31,145,1,0,0,0,33,148,1,0,0,0,35,151,1,0,0,0,37,154,1,0,0,0,39,157,
1,0,0,0,41,160,1,0,0,0,43,163,1,0,0,0,45,165,1,0,0,0,47,168,1,0,0,0,49,171,
1,0,0,0,51,174,1,0,0,0,53,177,1,0,0,0,55,180,1,0,0,0,57,183,1,0,0,0,59,192,
1,0,0,0,61,196,1,0,0,0,63,200,1,0,0,0,65,203,1,0,0,0,67,209,1,0,0,0,69,216,
1,0,0,0,71,221,1,0,0,0,73,227,1,0,0,0,75,235,1,0,0,0,77,246,1,0,0,0,79,249,
1,0,0,0,81,251,1,0,0,0,83,261,1,0,0,0,85,263,1,0,0,0,87,272,1,0,0,0,89,280,
1,0,0,0,91,291,1,0,0,0,93,302,1,0,0,0,95,316,1,0,0,0,97,98,5,110,0,0,98,
99,5,97,0,0,99,100,5,109,0,0,100,101,5,101,0,0,101,102,5,58,0,0,102,2,1,
0,0,0,103,104,5,105,0,0,104,105,5,109,0,0,105,106,5,112,0,0,106,107,5,111,
0,0,107,108,5,114,0,0,108,109,5,116,0,0,109,110,5,58,0,0,110,4,1,0,0,0,111,
112,5,44,0,0,112,6,1,0,0,0,113,114,5,95,0,0,114,115,5,95,0,0,115,116,5,84,
0,0,116,117,5,105,0,0,117,118,5,66,0,0,118,119,5,97,0,0,119,120,5,115,0,
0,120,121,5,105,0,0,121,122,5,99,0,0,122,8,1,0,0,0,123,124,5,40,0,0,124,
10,1,0,0,0,125,126,5,41,0,0,126,12,1,0,0,0,127,128,5,123,0,0,128,14,1,0,
0,0,129,130,5,125,0,0,130,16,1,0,0,0,131,132,5,59,0,0,132,18,1,0,0,0,133,
134,5,43,0,0,134,20,1,0,0,0,135,136,5,45,0,0,136,22,1,0,0,0,137,138,5,42,
0,0,138,24,1,0,0,0,139,140,5,47,0,0,140,26,1,0,0,0,141,142,5,62,0,0,142,
28,1,0,0,0,143,144,5,60,0,0,144,30,1,0,0,0,145,146,5,61,0,0,146,147,5,61,
0,0,147,32,1,0,0,0,148,149,5,33,0,0,149,150,5,61,0,0,150,34,1,0,0,0,151,
152,5,62,0,0,152,153,5,61,0,0,153,36,1,0,0,0,154,155,5,60,0,0,155,156,5,
61,0,0,156,38,1,0,0,0,157,158,5,124,0,0,158,159,5,124,0,0,159,40,1,0,0,0,
160,161,5,38,0,0,161,162,5,38,0,0,162,42,1,0,0,0,163,164,5,61,0,0,164,44,
1,0,0,0,165,166,5,43,0,0,166,167,5,61,0,0,167,46,1,0,0,0,168,169,5,45,0,
0,169,170,5,61,0,0,170,48,1,0,0,0,171,172,5,42,0,0,172,173,5,61,0,0,173,
50,1,0,0,0,174,175,5,47,0,0,175,176,5,61,0,0,176,52,1,0,0,0,177,178,5,43,
0,0,178,179,5,43,0,0,179,54,1,0,0,0,180,181,5,45,0,0,181,182,5,45,0,0,182,
56,1,0,0,0,183,184,5,102,0,0,184,185,5,117,0,0,185,186,5,110,0,0,186,187,
5,99,0,0,187,188,5,116,0,0,188,189,5,105,0,0,189,190,5,111,0,0,190,191,5,
110,0,0,191,58,1,0,0,0,192,193,5,118,0,0,193,194,5,97,0,0,194,195,5,114,
0,0,195,60,1,0,0,0,196,197,5,115,0,0,197,198,5,116,0,0,198,199,5,114,0,0,
199,62,1,0,0,0,200,201,5,105,0,0,201,202,5,102,0,0,202,64,1,0,0,0,203,204,
5,119,0,0,204,205,5,104,0,0,205,206,5,105,0,0,206,207,5,108,0,0,207,208,
5,101,0,0,208,66,1,0,0,0,209,210,5,114,0,0,210,211,5,101,0,0,211,212,5,116,
0,0,212,213,5,117,0,0,213,214,5,114,0,0,214,215,5,110,0,0,215,68,1,0,0,0,
216,217,5,116,0,0,217,218,5,114,0,0,218,219,5,117,0,0,219,220,5,101,0,0,
220,70,1,0,0,0,221,222,5,102,0,0,222,223,5,97,0,0,223,224,5,108,0,0,224,
225,5,115,0,0,225,226,5,101,0,0,226,72,1,0,0,0,227,231,7,0,0,0,228,230,7,
1,0,0,229,228,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,
74,1,0,0,0,233,231,1,0,0,0,234,236,5,45,0,0,235,234,1,0,0,0,235,236,1,0,
0,0,236,237,1,0,0,0,237,244,3,83,41,0,238,240,5,46,0,0,239,241,7,2,0,0,240,
239,1,0,0,0,241,242,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,245,1,0,
0,0,244,238,1,0,0,0,244,245,1,0,0,0,245,76,1,0,0,0,246,247,5,112,0,0,247,
248,5,105,0,0,248,78,1,0,0,0,249,250,5,101,0,0,250,80,1,0,0,0,251,252,5,
105,0,0,252,82,1,0,0,0,253,262,5,48,0,0,254,258,7,3,0,0,255,257,7,2,0,0,
256,255,1,0,0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,262,
1,0,0,0,260,258,1,0,0,0,261,253,1,0,0,0,261,254,1,0,0,0,262,84,1,0,0,0,263,
267,5,34,0,0,264,266,8,4,0,0,265,264,1,0,0,0,266,269,1,0,0,0,267,265,1,0,
0,0,267,268,1,0,0,0,268,270,1,0,0,0,269,267,1,0,0,0,270,271,5,34,0,0,271,
86,1,0,0,0,272,274,5,91,0,0,273,275,9,0,0,0,274,273,1,0,0,0,275,276,1,0,
0,0,276,277,1,0,0,0,276,274,1,0,0,0,277,278,1,0,0,0,278,279,5,93,0,0,279,
88,1,0,0,0,280,281,5,91,0,0,281,286,3,87,43,0,282,283,5,44,0,0,283,285,3,
87,43,0,284,282,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,
287,289,1,0,0,0,288,286,1,0,0,0,289,290,5,93,0,0,290,90,1,0,0,0,291,292,
5,47,0,0,292,293,5,47,0,0,293,297,1,0,0,0,294,296,8,5,0,0,295,294,1,0,0,
0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,300,1,0,0,0,299,297,
1,0,0,0,300,301,6,45,0,0,301,92,1,0,0,0,302,303,5,47,0,0,303,304,5,42,0,
0,304,308,1,0,0,0,305,307,9,0,0,0,306,305,1,0,0,0,307,310,1,0,0,0,308,309,
1,0,0,0,308,306,1,0,0,0,309,311,1,0,0,0,310,308,1,0,0,0,311,312,5,42,0,0,
312,313,5,47,0,0,313,314,1,0,0,0,314,315,6,46,0,0,315,94,1,0,0,0,316,317,
7,6,0,0,317,318,1,0,0,0,318,319,6,47,0,0,319,96,1,0,0,0,12,0,231,235,242,
244,258,261,267,276,286,297,308,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class ICEScriptLexer extends antlr4.Lexer {

    static grammarFileName = "ICEScript";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'name:'", "'import:'", "','", "'__TiBasic'", 
                         "'('", "')'", "'{'", "'}'", "';'", "'+'", "'-'", 
                         "'*'", "'/'", "'>'", "'<'", "'=='", "'!='", "'>='", 
                         "'<='", "'||'", "'&&'", "'='", "'+='", "'-='", 
                         "'*='", "'/='", "'++'", "'--'", "'function'", "'var'", 
                         "'str'", "'if'", "'while'", "'return'", "'true'", 
                         "'false'", null, null, "'pi'", "'e'", "'i'" ];
	static symbolicNames = [ null, null, null, null, null, "OPEN_BRACKET", 
                          "CLOSE_BRACKET", "OPEN_CURLEY", "CLOSE_CURLEY", 
                          "END_STMT", "ADD", "SUB", "MUL", "DIV", "GREATER_THAN", 
                          "LESS_THAN", "EQUAL_TO", "NOT_EQUAL_TO", "GREATER_THAN_OR_EQUAL", 
                          "LESS_THAN_OR_EQUAL", "OR", "AND", "ASSIGN", "ADDASSIGN", 
                          "SUBASSIGN", "MULASSIGN", "DIVASSIGN", "INCREMENT", 
                          "DECREMENT", "DEF", "VAR", "STR", "IF", "WHILE", 
                          "RETURN", "TRUE", "FALSE", "IDENTIFIER", "NUMBER", 
                          "PI", "E", "I", "QUOTED_TEXT", "LIST", "MATRIX", 
                          "LINECOMMENT", "BLOCKCOMMENT", "WHITESPACE" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "OPEN_BRACKET", "CLOSE_BRACKET", 
                      "OPEN_CURLEY", "CLOSE_CURLEY", "END_STMT", "ADD", 
                      "SUB", "MUL", "DIV", "GREATER_THAN", "LESS_THAN", 
                      "EQUAL_TO", "NOT_EQUAL_TO", "GREATER_THAN_OR_EQUAL", 
                      "LESS_THAN_OR_EQUAL", "OR", "AND", "ASSIGN", "ADDASSIGN", 
                      "SUBASSIGN", "MULASSIGN", "DIVASSIGN", "INCREMENT", 
                      "DECREMENT", "DEF", "VAR", "STR", "IF", "WHILE", "RETURN", 
                      "TRUE", "FALSE", "IDENTIFIER", "NUMBER", "PI", "E", 
                      "I", "INT", "QUOTED_TEXT", "LIST", "MATRIX", "LINECOMMENT", 
                      "BLOCKCOMMENT", "WHITESPACE" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

ICEScriptLexer.EOF = antlr4.Token.EOF;
ICEScriptLexer.T__0 = 1;
ICEScriptLexer.T__1 = 2;
ICEScriptLexer.T__2 = 3;
ICEScriptLexer.T__3 = 4;
ICEScriptLexer.OPEN_BRACKET = 5;
ICEScriptLexer.CLOSE_BRACKET = 6;
ICEScriptLexer.OPEN_CURLEY = 7;
ICEScriptLexer.CLOSE_CURLEY = 8;
ICEScriptLexer.END_STMT = 9;
ICEScriptLexer.ADD = 10;
ICEScriptLexer.SUB = 11;
ICEScriptLexer.MUL = 12;
ICEScriptLexer.DIV = 13;
ICEScriptLexer.GREATER_THAN = 14;
ICEScriptLexer.LESS_THAN = 15;
ICEScriptLexer.EQUAL_TO = 16;
ICEScriptLexer.NOT_EQUAL_TO = 17;
ICEScriptLexer.GREATER_THAN_OR_EQUAL = 18;
ICEScriptLexer.LESS_THAN_OR_EQUAL = 19;
ICEScriptLexer.OR = 20;
ICEScriptLexer.AND = 21;
ICEScriptLexer.ASSIGN = 22;
ICEScriptLexer.ADDASSIGN = 23;
ICEScriptLexer.SUBASSIGN = 24;
ICEScriptLexer.MULASSIGN = 25;
ICEScriptLexer.DIVASSIGN = 26;
ICEScriptLexer.INCREMENT = 27;
ICEScriptLexer.DECREMENT = 28;
ICEScriptLexer.DEF = 29;
ICEScriptLexer.VAR = 30;
ICEScriptLexer.STR = 31;
ICEScriptLexer.IF = 32;
ICEScriptLexer.WHILE = 33;
ICEScriptLexer.RETURN = 34;
ICEScriptLexer.TRUE = 35;
ICEScriptLexer.FALSE = 36;
ICEScriptLexer.IDENTIFIER = 37;
ICEScriptLexer.NUMBER = 38;
ICEScriptLexer.PI = 39;
ICEScriptLexer.E = 40;
ICEScriptLexer.I = 41;
ICEScriptLexer.QUOTED_TEXT = 42;
ICEScriptLexer.LIST = 43;
ICEScriptLexer.MATRIX = 44;
ICEScriptLexer.LINECOMMENT = 45;
ICEScriptLexer.BLOCKCOMMENT = 46;
ICEScriptLexer.WHITESPACE = 47;



