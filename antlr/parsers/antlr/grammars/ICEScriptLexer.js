// Generated from ./antlr/grammars/ICEScript by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,60,398,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,1,0,1,0,1,0,1,0,1,0,1,0,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,
1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,
12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,
1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,
18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,
1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,
31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,
1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,
42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,
1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,
47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,
1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,5,52,322,8,52,10,52,12,
52,325,9,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,5,54,334,8,54,10,54,12,54,
337,9,54,3,54,339,8,54,1,55,1,55,5,55,343,8,55,10,55,12,55,346,9,55,1,55,
1,55,1,56,1,56,4,56,352,8,56,11,56,12,56,353,1,56,1,56,1,57,3,57,359,8,57,
1,57,1,57,1,57,4,57,364,8,57,11,57,12,57,365,3,57,368,8,57,1,58,1,58,1,58,
1,58,5,58,374,8,58,10,58,12,58,377,9,58,1,58,1,58,1,59,1,59,1,59,1,59,5,
59,385,8,59,10,59,12,59,388,9,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,
1,60,2,353,386,0,61,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,
95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,0,111,55,113,56,115,57,
117,58,119,59,121,60,1,0,7,2,0,65,90,97,122,5,0,46,46,48,57,65,90,95,95,
97,122,1,0,49,57,1,0,48,57,3,0,10,10,13,13,34,34,2,0,10,10,13,13,3,0,9,10,
13,13,32,32,406,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,
0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,111,1,0,
0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,
0,1,123,1,0,0,0,3,129,1,0,0,0,5,136,1,0,0,0,7,138,1,0,0,0,9,140,1,0,0,0,
11,146,1,0,0,0,13,154,1,0,0,0,15,158,1,0,0,0,17,165,1,0,0,0,19,168,1,0,0,
0,21,170,1,0,0,0,23,172,1,0,0,0,25,179,1,0,0,0,27,184,1,0,0,0,29,189,1,0,
0,0,31,193,1,0,0,0,33,200,1,0,0,0,35,205,1,0,0,0,37,208,1,0,0,0,39,210,1,
0,0,0,41,212,1,0,0,0,43,214,1,0,0,0,45,216,1,0,0,0,47,218,1,0,0,0,49,220,
1,0,0,0,51,222,1,0,0,0,53,224,1,0,0,0,55,226,1,0,0,0,57,228,1,0,0,0,59,230,
1,0,0,0,61,233,1,0,0,0,63,236,1,0,0,0,65,239,1,0,0,0,67,242,1,0,0,0,69,245,
1,0,0,0,71,248,1,0,0,0,73,250,1,0,0,0,75,252,1,0,0,0,77,255,1,0,0,0,79,258,
1,0,0,0,81,261,1,0,0,0,83,264,1,0,0,0,85,267,1,0,0,0,87,272,1,0,0,0,89,275,
1,0,0,0,91,278,1,0,0,0,93,287,1,0,0,0,95,291,1,0,0,0,97,297,1,0,0,0,99,301,
1,0,0,0,101,308,1,0,0,0,103,313,1,0,0,0,105,319,1,0,0,0,107,326,1,0,0,0,
109,338,1,0,0,0,111,340,1,0,0,0,113,349,1,0,0,0,115,358,1,0,0,0,117,369,
1,0,0,0,119,380,1,0,0,0,121,394,1,0,0,0,123,124,5,110,0,0,124,125,5,97,0,
0,125,126,5,109,0,0,126,127,5,101,0,0,127,128,5,58,0,0,128,2,1,0,0,0,129,
130,5,105,0,0,130,131,5,109,0,0,131,132,5,112,0,0,132,133,5,111,0,0,133,
134,5,114,0,0,134,135,5,116,0,0,135,4,1,0,0,0,136,137,5,58,0,0,137,6,1,0,
0,0,138,139,5,44,0,0,139,8,1,0,0,0,140,141,5,99,0,0,141,142,5,108,0,0,142,
143,5,97,0,0,143,144,5,115,0,0,144,145,5,115,0,0,145,10,1,0,0,0,146,147,
5,101,0,0,147,148,5,120,0,0,148,149,5,116,0,0,149,150,5,101,0,0,150,151,
5,110,0,0,151,152,5,100,0,0,152,153,5,115,0,0,153,12,1,0,0,0,154,155,5,110,
0,0,155,156,5,101,0,0,156,157,5,119,0,0,157,14,1,0,0,0,158,159,5,95,0,0,
159,160,5,95,0,0,160,161,5,76,0,0,161,162,5,76,0,0,162,163,5,86,0,0,163,
164,5,77,0,0,164,16,1,0,0,0,165,166,5,105,0,0,166,167,5,110,0,0,167,18,1,
0,0,0,168,169,5,91,0,0,169,20,1,0,0,0,170,171,5,93,0,0,171,22,1,0,0,0,172,
173,5,111,0,0,173,174,5,98,0,0,174,175,5,106,0,0,175,176,5,101,0,0,176,177,
5,99,0,0,177,178,5,116,0,0,178,24,1,0,0,0,179,180,5,118,0,0,180,181,5,111,
0,0,181,182,5,105,0,0,182,183,5,100,0,0,183,26,1,0,0,0,184,185,5,108,0,0,
185,186,5,105,0,0,186,187,5,115,0,0,187,188,5,116,0,0,188,28,1,0,0,0,189,
190,5,115,0,0,190,191,5,116,0,0,191,192,5,114,0,0,192,30,1,0,0,0,193,194,
5,110,0,0,194,195,5,117,0,0,195,196,5,109,0,0,196,197,5,98,0,0,197,198,5,
101,0,0,198,199,5,114,0,0,199,32,1,0,0,0,200,201,5,98,0,0,201,202,5,111,
0,0,202,203,5,111,0,0,203,204,5,108,0,0,204,34,1,0,0,0,205,206,5,91,0,0,
206,207,5,93,0,0,207,36,1,0,0,0,208,209,5,40,0,0,209,38,1,0,0,0,210,211,
5,41,0,0,211,40,1,0,0,0,212,213,5,123,0,0,213,42,1,0,0,0,214,215,5,125,0,
0,215,44,1,0,0,0,216,217,5,59,0,0,217,46,1,0,0,0,218,219,5,43,0,0,219,48,
1,0,0,0,220,221,5,45,0,0,221,50,1,0,0,0,222,223,5,42,0,0,223,52,1,0,0,0,
224,225,5,47,0,0,225,54,1,0,0,0,226,227,5,62,0,0,227,56,1,0,0,0,228,229,
5,60,0,0,229,58,1,0,0,0,230,231,5,61,0,0,231,232,5,61,0,0,232,60,1,0,0,0,
233,234,5,33,0,0,234,235,5,61,0,0,235,62,1,0,0,0,236,237,5,62,0,0,237,238,
5,61,0,0,238,64,1,0,0,0,239,240,5,60,0,0,240,241,5,61,0,0,241,66,1,0,0,0,
242,243,5,124,0,0,243,244,5,124,0,0,244,68,1,0,0,0,245,246,5,38,0,0,246,
247,5,38,0,0,247,70,1,0,0,0,248,249,5,33,0,0,249,72,1,0,0,0,250,251,5,61,
0,0,251,74,1,0,0,0,252,253,5,43,0,0,253,254,5,61,0,0,254,76,1,0,0,0,255,
256,5,45,0,0,256,257,5,61,0,0,257,78,1,0,0,0,258,259,5,42,0,0,259,260,5,
61,0,0,260,80,1,0,0,0,261,262,5,47,0,0,262,263,5,61,0,0,263,82,1,0,0,0,264,
265,5,105,0,0,265,266,5,102,0,0,266,84,1,0,0,0,267,268,5,101,0,0,268,269,
5,108,0,0,269,270,5,115,0,0,270,271,5,101,0,0,271,86,1,0,0,0,272,273,5,43,
0,0,273,274,5,43,0,0,274,88,1,0,0,0,275,276,5,45,0,0,276,277,5,45,0,0,277,
90,1,0,0,0,278,279,5,102,0,0,279,280,5,117,0,0,280,281,5,110,0,0,281,282,
5,99,0,0,282,283,5,116,0,0,283,284,5,105,0,0,284,285,5,111,0,0,285,286,5,
110,0,0,286,92,1,0,0,0,287,288,5,118,0,0,288,289,5,97,0,0,289,290,5,114,
0,0,290,94,1,0,0,0,291,292,5,119,0,0,292,293,5,104,0,0,293,294,5,105,0,0,
294,295,5,108,0,0,295,296,5,101,0,0,296,96,1,0,0,0,297,298,5,102,0,0,298,
299,5,111,0,0,299,300,5,114,0,0,300,98,1,0,0,0,301,302,5,114,0,0,302,303,
5,101,0,0,303,304,5,116,0,0,304,305,5,117,0,0,305,306,5,114,0,0,306,307,
5,110,0,0,307,100,1,0,0,0,308,309,5,116,0,0,309,310,5,114,0,0,310,311,5,
117,0,0,311,312,5,101,0,0,312,102,1,0,0,0,313,314,5,102,0,0,314,315,5,97,
0,0,315,316,5,108,0,0,316,317,5,115,0,0,317,318,5,101,0,0,318,104,1,0,0,
0,319,323,7,0,0,0,320,322,7,1,0,0,321,320,1,0,0,0,322,325,1,0,0,0,323,321,
1,0,0,0,323,324,1,0,0,0,324,106,1,0,0,0,325,323,1,0,0,0,326,327,5,36,0,0,
327,328,5,112,0,0,328,329,5,105,0,0,329,108,1,0,0,0,330,339,5,48,0,0,331,
335,7,2,0,0,332,334,7,3,0,0,333,332,1,0,0,0,334,337,1,0,0,0,335,333,1,0,
0,0,335,336,1,0,0,0,336,339,1,0,0,0,337,335,1,0,0,0,338,330,1,0,0,0,338,
331,1,0,0,0,339,110,1,0,0,0,340,344,5,34,0,0,341,343,8,4,0,0,342,341,1,0,
0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,
344,1,0,0,0,347,348,5,34,0,0,348,112,1,0,0,0,349,351,5,91,0,0,350,352,9,
0,0,0,351,350,1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,353,351,1,0,0,0,354,
355,1,0,0,0,355,356,5,93,0,0,356,114,1,0,0,0,357,359,5,45,0,0,358,357,1,
0,0,0,358,359,1,0,0,0,359,360,1,0,0,0,360,367,3,109,54,0,361,363,5,46,0,
0,362,364,7,3,0,0,363,362,1,0,0,0,364,365,1,0,0,0,365,363,1,0,0,0,365,366,
1,0,0,0,366,368,1,0,0,0,367,361,1,0,0,0,367,368,1,0,0,0,368,116,1,0,0,0,
369,370,5,47,0,0,370,371,5,47,0,0,371,375,1,0,0,0,372,374,8,5,0,0,373,372,
1,0,0,0,374,377,1,0,0,0,375,373,1,0,0,0,375,376,1,0,0,0,376,378,1,0,0,0,
377,375,1,0,0,0,378,379,6,58,0,0,379,118,1,0,0,0,380,381,5,47,0,0,381,382,
5,42,0,0,382,386,1,0,0,0,383,385,9,0,0,0,384,383,1,0,0,0,385,388,1,0,0,0,
386,387,1,0,0,0,386,384,1,0,0,0,387,389,1,0,0,0,388,386,1,0,0,0,389,390,
5,42,0,0,390,391,5,47,0,0,391,392,1,0,0,0,392,393,6,59,0,0,393,120,1,0,0,
0,394,395,7,6,0,0,395,396,1,0,0,0,396,397,6,60,0,0,397,122,1,0,0,0,11,0,
323,335,338,344,353,358,365,367,375,386,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class ICEScriptLexer extends antlr4.Lexer {

    static grammarFileName = "ICEScript";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'name:'", "'import'", "':'", "','", "'class'", 
                         "'extends'", "'new'", "'__LLVM'", "'in'", "'['", 
                         "']'", "'object'", "'void'", "'list'", "'str'", 
                         "'number'", "'bool'", "'[]'", "'('", "')'", "'{'", 
                         "'}'", "';'", "'+'", "'-'", "'*'", "'/'", "'>'", 
                         "'<'", "'=='", "'!='", "'>='", "'<='", "'||'", 
                         "'&&'", "'!'", "'='", "'+='", "'-='", "'*='", "'/='", 
                         "'if'", "'else'", "'++'", "'--'", "'function'", 
                         "'var'", "'while'", "'for'", "'return'", "'true'", 
                         "'false'", null, "'$pi'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, "OPEN_BRACKET", "CLOSE_BRACKET", 
                          "OPEN_CURLEY", "CLOSE_CURLEY", "END_STMT", "ADD", 
                          "SUB", "MUL", "DIV", "GREATER_THAN", "LESS_THAN", 
                          "EQUAL_TO", "NOT_EQUAL_TO", "GREATER_THAN_OR_EQUAL", 
                          "LESS_THAN_OR_EQUAL", "OR", "AND", "NOT", "ASSIGN", 
                          "ADDASSIGN", "SUBASSIGN", "MULASSIGN", "DIVASSIGN", 
                          "IF", "ELSE", "INCREMENT", "DECREMENT", "DEF", 
                          "VAR", "WHILE", "FOR", "RETURN", "TRUE", "FALSE", 
                          "IDENTIFIER", "PI", "STRING", "LIST", "NUMBER", 
                          "LINECOMMENT", "BLOCKCOMMENT", "WHITESPACE" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "T__17", "OPEN_BRACKET", 
                      "CLOSE_BRACKET", "OPEN_CURLEY", "CLOSE_CURLEY", "END_STMT", 
                      "ADD", "SUB", "MUL", "DIV", "GREATER_THAN", "LESS_THAN", 
                      "EQUAL_TO", "NOT_EQUAL_TO", "GREATER_THAN_OR_EQUAL", 
                      "LESS_THAN_OR_EQUAL", "OR", "AND", "NOT", "ASSIGN", 
                      "ADDASSIGN", "SUBASSIGN", "MULASSIGN", "DIVASSIGN", 
                      "IF", "ELSE", "INCREMENT", "DECREMENT", "DEF", "VAR", 
                      "WHILE", "FOR", "RETURN", "TRUE", "FALSE", "IDENTIFIER", 
                      "PI", "INT", "STRING", "LIST", "NUMBER", "LINECOMMENT", 
                      "BLOCKCOMMENT", "WHITESPACE" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

ICEScriptLexer.EOF = antlr4.Token.EOF;
ICEScriptLexer.T__0 = 1;
ICEScriptLexer.T__1 = 2;
ICEScriptLexer.T__2 = 3;
ICEScriptLexer.T__3 = 4;
ICEScriptLexer.T__4 = 5;
ICEScriptLexer.T__5 = 6;
ICEScriptLexer.T__6 = 7;
ICEScriptLexer.T__7 = 8;
ICEScriptLexer.T__8 = 9;
ICEScriptLexer.T__9 = 10;
ICEScriptLexer.T__10 = 11;
ICEScriptLexer.T__11 = 12;
ICEScriptLexer.T__12 = 13;
ICEScriptLexer.T__13 = 14;
ICEScriptLexer.T__14 = 15;
ICEScriptLexer.T__15 = 16;
ICEScriptLexer.T__16 = 17;
ICEScriptLexer.T__17 = 18;
ICEScriptLexer.OPEN_BRACKET = 19;
ICEScriptLexer.CLOSE_BRACKET = 20;
ICEScriptLexer.OPEN_CURLEY = 21;
ICEScriptLexer.CLOSE_CURLEY = 22;
ICEScriptLexer.END_STMT = 23;
ICEScriptLexer.ADD = 24;
ICEScriptLexer.SUB = 25;
ICEScriptLexer.MUL = 26;
ICEScriptLexer.DIV = 27;
ICEScriptLexer.GREATER_THAN = 28;
ICEScriptLexer.LESS_THAN = 29;
ICEScriptLexer.EQUAL_TO = 30;
ICEScriptLexer.NOT_EQUAL_TO = 31;
ICEScriptLexer.GREATER_THAN_OR_EQUAL = 32;
ICEScriptLexer.LESS_THAN_OR_EQUAL = 33;
ICEScriptLexer.OR = 34;
ICEScriptLexer.AND = 35;
ICEScriptLexer.NOT = 36;
ICEScriptLexer.ASSIGN = 37;
ICEScriptLexer.ADDASSIGN = 38;
ICEScriptLexer.SUBASSIGN = 39;
ICEScriptLexer.MULASSIGN = 40;
ICEScriptLexer.DIVASSIGN = 41;
ICEScriptLexer.IF = 42;
ICEScriptLexer.ELSE = 43;
ICEScriptLexer.INCREMENT = 44;
ICEScriptLexer.DECREMENT = 45;
ICEScriptLexer.DEF = 46;
ICEScriptLexer.VAR = 47;
ICEScriptLexer.WHILE = 48;
ICEScriptLexer.FOR = 49;
ICEScriptLexer.RETURN = 50;
ICEScriptLexer.TRUE = 51;
ICEScriptLexer.FALSE = 52;
ICEScriptLexer.IDENTIFIER = 53;
ICEScriptLexer.PI = 54;
ICEScriptLexer.STRING = 55;
ICEScriptLexer.LIST = 56;
ICEScriptLexer.NUMBER = 57;
ICEScriptLexer.LINECOMMENT = 58;
ICEScriptLexer.BLOCKCOMMENT = 59;
ICEScriptLexer.WHITESPACE = 60;



