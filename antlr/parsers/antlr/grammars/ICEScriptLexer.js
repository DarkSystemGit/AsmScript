// Generated from ./antlr/grammars/ICEScript by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,49,331,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,
2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,
7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,
1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,
20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,
1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,
29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,
35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,
1,37,1,38,1,38,5,38,241,8,38,10,38,12,38,244,9,38,1,39,3,39,247,8,39,1,39,
1,39,1,39,4,39,252,8,39,11,39,12,39,253,3,39,256,8,39,1,40,1,40,1,40,1,41,
1,41,1,42,1,42,1,43,1,43,1,43,5,43,268,8,43,10,43,12,43,271,9,43,3,43,273,
8,43,1,44,1,44,5,44,277,8,44,10,44,12,44,280,9,44,1,44,1,44,1,45,1,45,4,
45,286,8,45,11,45,12,45,287,1,45,1,45,1,46,1,46,1,46,1,46,5,46,296,8,46,
10,46,12,46,299,9,46,1,46,1,46,1,47,1,47,1,47,1,47,5,47,307,8,47,10,47,12,
47,310,9,47,1,47,1,47,1,48,1,48,1,48,1,48,5,48,318,8,48,10,48,12,48,321,
9,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,2,287,319,0,50,1,1,3,2,
5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
81,41,83,42,85,43,87,0,89,44,91,45,93,46,95,47,97,48,99,49,1,0,7,2,0,65,
90,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,1,0,49,57,3,0,10,10,13,
13,34,34,2,0,10,10,13,13,3,0,9,10,13,13,32,32,340,0,1,1,0,0,0,0,3,1,0,0,
0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,
61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
1,0,0,0,0,85,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,
0,97,1,0,0,0,0,99,1,0,0,0,1,101,1,0,0,0,3,107,1,0,0,0,5,115,1,0,0,0,7,117,
1,0,0,0,9,127,1,0,0,0,11,129,1,0,0,0,13,131,1,0,0,0,15,133,1,0,0,0,17,135,
1,0,0,0,19,137,1,0,0,0,21,139,1,0,0,0,23,141,1,0,0,0,25,143,1,0,0,0,27,145,
1,0,0,0,29,147,1,0,0,0,31,149,1,0,0,0,33,152,1,0,0,0,35,155,1,0,0,0,37,158,
1,0,0,0,39,161,1,0,0,0,41,164,1,0,0,0,43,167,1,0,0,0,45,169,1,0,0,0,47,171,
1,0,0,0,49,174,1,0,0,0,51,177,1,0,0,0,53,180,1,0,0,0,55,183,1,0,0,0,57,187,
1,0,0,0,59,190,1,0,0,0,61,195,1,0,0,0,63,198,1,0,0,0,65,201,1,0,0,0,67,210,
1,0,0,0,69,214,1,0,0,0,71,220,1,0,0,0,73,227,1,0,0,0,75,232,1,0,0,0,77,238,
1,0,0,0,79,246,1,0,0,0,81,257,1,0,0,0,83,260,1,0,0,0,85,262,1,0,0,0,87,272,
1,0,0,0,89,274,1,0,0,0,91,283,1,0,0,0,93,291,1,0,0,0,95,302,1,0,0,0,97,313,
1,0,0,0,99,327,1,0,0,0,101,102,5,110,0,0,102,103,5,97,0,0,103,104,5,109,
0,0,104,105,5,101,0,0,105,106,5,58,0,0,106,2,1,0,0,0,107,108,5,105,0,0,108,
109,5,109,0,0,109,110,5,112,0,0,110,111,5,111,0,0,111,112,5,114,0,0,112,
113,5,116,0,0,113,114,5,58,0,0,114,4,1,0,0,0,115,116,5,44,0,0,116,6,1,0,
0,0,117,118,5,95,0,0,118,119,5,95,0,0,119,120,5,84,0,0,120,121,5,105,0,0,
121,122,5,66,0,0,122,123,5,97,0,0,123,124,5,115,0,0,124,125,5,105,0,0,125,
126,5,99,0,0,126,8,1,0,0,0,127,128,5,40,0,0,128,10,1,0,0,0,129,130,5,41,
0,0,130,12,1,0,0,0,131,132,5,123,0,0,132,14,1,0,0,0,133,134,5,125,0,0,134,
16,1,0,0,0,135,136,5,59,0,0,136,18,1,0,0,0,137,138,5,43,0,0,138,20,1,0,0,
0,139,140,5,45,0,0,140,22,1,0,0,0,141,142,5,42,0,0,142,24,1,0,0,0,143,144,
5,47,0,0,144,26,1,0,0,0,145,146,5,62,0,0,146,28,1,0,0,0,147,148,5,60,0,0,
148,30,1,0,0,0,149,150,5,61,0,0,150,151,5,61,0,0,151,32,1,0,0,0,152,153,
5,33,0,0,153,154,5,61,0,0,154,34,1,0,0,0,155,156,5,62,0,0,156,157,5,61,0,
0,157,36,1,0,0,0,158,159,5,60,0,0,159,160,5,61,0,0,160,38,1,0,0,0,161,162,
5,124,0,0,162,163,5,124,0,0,163,40,1,0,0,0,164,165,5,38,0,0,165,166,5,38,
0,0,166,42,1,0,0,0,167,168,5,33,0,0,168,44,1,0,0,0,169,170,5,61,0,0,170,
46,1,0,0,0,171,172,5,43,0,0,172,173,5,61,0,0,173,48,1,0,0,0,174,175,5,45,
0,0,175,176,5,61,0,0,176,50,1,0,0,0,177,178,5,42,0,0,178,179,5,61,0,0,179,
52,1,0,0,0,180,181,5,47,0,0,181,182,5,61,0,0,182,54,1,0,0,0,183,184,5,115,
0,0,184,185,5,116,0,0,185,186,5,114,0,0,186,56,1,0,0,0,187,188,5,105,0,0,
188,189,5,102,0,0,189,58,1,0,0,0,190,191,5,101,0,0,191,192,5,108,0,0,192,
193,5,115,0,0,193,194,5,101,0,0,194,60,1,0,0,0,195,196,5,43,0,0,196,197,
5,43,0,0,197,62,1,0,0,0,198,199,5,45,0,0,199,200,5,45,0,0,200,64,1,0,0,0,
201,202,5,102,0,0,202,203,5,117,0,0,203,204,5,110,0,0,204,205,5,99,0,0,205,
206,5,116,0,0,206,207,5,105,0,0,207,208,5,111,0,0,208,209,5,110,0,0,209,
66,1,0,0,0,210,211,5,118,0,0,211,212,5,97,0,0,212,213,5,114,0,0,213,68,1,
0,0,0,214,215,5,119,0,0,215,216,5,104,0,0,216,217,5,105,0,0,217,218,5,108,
0,0,218,219,5,101,0,0,219,70,1,0,0,0,220,221,5,114,0,0,221,222,5,101,0,0,
222,223,5,116,0,0,223,224,5,117,0,0,224,225,5,114,0,0,225,226,5,110,0,0,
226,72,1,0,0,0,227,228,5,116,0,0,228,229,5,114,0,0,229,230,5,117,0,0,230,
231,5,101,0,0,231,74,1,0,0,0,232,233,5,102,0,0,233,234,5,97,0,0,234,235,
5,108,0,0,235,236,5,115,0,0,236,237,5,101,0,0,237,76,1,0,0,0,238,242,7,0,
0,0,239,241,7,1,0,0,240,239,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,
243,1,0,0,0,243,78,1,0,0,0,244,242,1,0,0,0,245,247,5,45,0,0,246,245,1,0,
0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,255,3,87,43,0,249,251,5,46,0,0,250,
252,7,2,0,0,251,250,1,0,0,0,252,253,1,0,0,0,253,251,1,0,0,0,253,254,1,0,
0,0,254,256,1,0,0,0,255,249,1,0,0,0,255,256,1,0,0,0,256,80,1,0,0,0,257,258,
5,112,0,0,258,259,5,105,0,0,259,82,1,0,0,0,260,261,5,101,0,0,261,84,1,0,
0,0,262,263,5,105,0,0,263,86,1,0,0,0,264,273,5,48,0,0,265,269,7,3,0,0,266,
268,7,2,0,0,267,266,1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,
0,0,270,273,1,0,0,0,271,269,1,0,0,0,272,264,1,0,0,0,272,265,1,0,0,0,273,
88,1,0,0,0,274,278,5,34,0,0,275,277,8,4,0,0,276,275,1,0,0,0,277,280,1,0,
0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,281,1,0,0,0,280,278,1,0,0,0,281,
282,5,34,0,0,282,90,1,0,0,0,283,285,5,91,0,0,284,286,9,0,0,0,285,284,1,0,
0,0,286,287,1,0,0,0,287,288,1,0,0,0,287,285,1,0,0,0,288,289,1,0,0,0,289,
290,5,93,0,0,290,92,1,0,0,0,291,292,5,91,0,0,292,297,3,91,45,0,293,294,5,
44,0,0,294,296,3,91,45,0,295,293,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,
297,298,1,0,0,0,298,300,1,0,0,0,299,297,1,0,0,0,300,301,5,93,0,0,301,94,
1,0,0,0,302,303,5,47,0,0,303,304,5,47,0,0,304,308,1,0,0,0,305,307,8,5,0,
0,306,305,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,311,
1,0,0,0,310,308,1,0,0,0,311,312,6,47,0,0,312,96,1,0,0,0,313,314,5,47,0,0,
314,315,5,42,0,0,315,319,1,0,0,0,316,318,9,0,0,0,317,316,1,0,0,0,318,321,
1,0,0,0,319,320,1,0,0,0,319,317,1,0,0,0,320,322,1,0,0,0,321,319,1,0,0,0,
322,323,5,42,0,0,323,324,5,47,0,0,324,325,1,0,0,0,325,326,6,48,0,0,326,98,
1,0,0,0,327,328,7,6,0,0,328,329,1,0,0,0,329,330,6,49,0,0,330,100,1,0,0,0,
12,0,242,246,253,255,269,272,278,287,297,308,319,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class ICEScriptLexer extends antlr4.Lexer {

    static grammarFileName = "ICEScript";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'name:'", "'import:'", "','", "'__TiBasic'", 
                         "'('", "')'", "'{'", "'}'", "';'", "'+'", "'-'", 
                         "'*'", "'/'", "'>'", "'<'", "'=='", "'!='", "'>='", 
                         "'<='", "'||'", "'&&'", "'!'", "'='", "'+='", "'-='", 
                         "'*='", "'/='", "'str'", "'if'", "'else'", "'++'", 
                         "'--'", "'function'", "'var'", "'while'", "'return'", 
                         "'true'", "'false'", null, null, "'pi'", "'e'", 
                         "'i'" ];
	static symbolicNames = [ null, null, null, null, null, "OPEN_BRACKET", 
                          "CLOSE_BRACKET", "OPEN_CURLEY", "CLOSE_CURLEY", 
                          "END_STMT", "ADD", "SUB", "MUL", "DIV", "GREATER_THAN", 
                          "LESS_THAN", "EQUAL_TO", "NOT_EQUAL_TO", "GREATER_THAN_OR_EQUAL", 
                          "LESS_THAN_OR_EQUAL", "OR", "AND", "NOT", "ASSIGN", 
                          "ADDASSIGN", "SUBASSIGN", "MULASSIGN", "DIVASSIGN", 
                          "STR", "IF", "ELSE", "INCREMENT", "DECREMENT", 
                          "DEF", "VAR", "WHILE", "RETURN", "TRUE", "FALSE", 
                          "IDENTIFIER", "NUMBER", "PI", "E", "I", "QUOTED_TEXT", 
                          "LIST", "MATRIX", "LINECOMMENT", "BLOCKCOMMENT", 
                          "WHITESPACE" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "OPEN_BRACKET", "CLOSE_BRACKET", 
                      "OPEN_CURLEY", "CLOSE_CURLEY", "END_STMT", "ADD", 
                      "SUB", "MUL", "DIV", "GREATER_THAN", "LESS_THAN", 
                      "EQUAL_TO", "NOT_EQUAL_TO", "GREATER_THAN_OR_EQUAL", 
                      "LESS_THAN_OR_EQUAL", "OR", "AND", "NOT", "ASSIGN", 
                      "ADDASSIGN", "SUBASSIGN", "MULASSIGN", "DIVASSIGN", 
                      "STR", "IF", "ELSE", "INCREMENT", "DECREMENT", "DEF", 
                      "VAR", "WHILE", "RETURN", "TRUE", "FALSE", "IDENTIFIER", 
                      "NUMBER", "PI", "E", "I", "INT", "QUOTED_TEXT", "LIST", 
                      "MATRIX", "LINECOMMENT", "BLOCKCOMMENT", "WHITESPACE" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

ICEScriptLexer.EOF = antlr4.Token.EOF;
ICEScriptLexer.T__0 = 1;
ICEScriptLexer.T__1 = 2;
ICEScriptLexer.T__2 = 3;
ICEScriptLexer.T__3 = 4;
ICEScriptLexer.OPEN_BRACKET = 5;
ICEScriptLexer.CLOSE_BRACKET = 6;
ICEScriptLexer.OPEN_CURLEY = 7;
ICEScriptLexer.CLOSE_CURLEY = 8;
ICEScriptLexer.END_STMT = 9;
ICEScriptLexer.ADD = 10;
ICEScriptLexer.SUB = 11;
ICEScriptLexer.MUL = 12;
ICEScriptLexer.DIV = 13;
ICEScriptLexer.GREATER_THAN = 14;
ICEScriptLexer.LESS_THAN = 15;
ICEScriptLexer.EQUAL_TO = 16;
ICEScriptLexer.NOT_EQUAL_TO = 17;
ICEScriptLexer.GREATER_THAN_OR_EQUAL = 18;
ICEScriptLexer.LESS_THAN_OR_EQUAL = 19;
ICEScriptLexer.OR = 20;
ICEScriptLexer.AND = 21;
ICEScriptLexer.NOT = 22;
ICEScriptLexer.ASSIGN = 23;
ICEScriptLexer.ADDASSIGN = 24;
ICEScriptLexer.SUBASSIGN = 25;
ICEScriptLexer.MULASSIGN = 26;
ICEScriptLexer.DIVASSIGN = 27;
ICEScriptLexer.STR = 28;
ICEScriptLexer.IF = 29;
ICEScriptLexer.ELSE = 30;
ICEScriptLexer.INCREMENT = 31;
ICEScriptLexer.DECREMENT = 32;
ICEScriptLexer.DEF = 33;
ICEScriptLexer.VAR = 34;
ICEScriptLexer.WHILE = 35;
ICEScriptLexer.RETURN = 36;
ICEScriptLexer.TRUE = 37;
ICEScriptLexer.FALSE = 38;
ICEScriptLexer.IDENTIFIER = 39;
ICEScriptLexer.NUMBER = 40;
ICEScriptLexer.PI = 41;
ICEScriptLexer.E = 42;
ICEScriptLexer.I = 43;
ICEScriptLexer.QUOTED_TEXT = 44;
ICEScriptLexer.LIST = 45;
ICEScriptLexer.MATRIX = 46;
ICEScriptLexer.LINECOMMENT = 47;
ICEScriptLexer.BLOCKCOMMENT = 48;
ICEScriptLexer.WHITESPACE = 49;



